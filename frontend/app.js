const API_BASE_URL = '/api';

class FamilyTreeApp {
    constructor() {
        this.persons = [];
        this.init();
    }

    async init() {
        console.log('Initializing Family Tree App...');
        this.setupEventListeners();
        await this.loadPersons();
        await this.loadTree();
    }

    setupEventListeners() {
        const form = document.getElementById('personForm');
        // –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.handleSubmit(e);
        });
    }

    async apiCall(endpoint, options = {}) {
        try {
            console.log(`Making API call to: ${API_BASE_URL}${endpoint}`, options);

            const config = {
                headers: {
                    'Content-Type': 'application/json',
                    ...options.headers
                },
                ...options
            };

            if (options.body) {
                config.body = JSON.stringify(options.body);
            }

            const response = await fetch(`${API_BASE_URL}${endpoint}`, config);

            console.log('Response status:', response.status);

            if (!response.ok) {
                const errorText = await response.text();
                console.error('API error response:', errorText);
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            console.log('API response data:', data);
            return data;

        } catch (error) {
            console.error('API call failed:', error);
            this.showError(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: ${error.message}`);
            throw error;
        }
    }

    async loadPersons() {
        try {
            console.log('Loading persons...');
            this.persons = await this.apiCall('/persons/');
            console.log('Loaded persons:', this.persons);
            this.updateParentSelect();
        } catch (error) {
            console.error('Failed to load persons:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π');
        }
    }

    async loadTree() {
        try {
            console.log('Loading tree...');
            const treeData = await this.apiCall('/tree/');
            console.log('Loaded tree:', treeData);
            this.renderTree(treeData);
        } catch (error) {
            console.error('Failed to load tree:', error);
            this.showTreeError();
        }
    }

    updateParentSelect() {
        const select = document.getElementById('parentId');
        select.innerHTML = '<option value="">-- –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è --</option>';

        this.persons.forEach(person => {
            const option = document.createElement('option');
            option.value = person.id;
            option.textContent = `${person.first_name} ${person.last_name} (ID: ${person.id})`;
            select.appendChild(option);
        });
    }

    renderTree(treeData) {
        const container = document.getElementById('treeContainer');

        if (!treeData || treeData.length === 0) {
            container.innerHTML = `
                <div class="empty-tree">
                    <h3>–î–µ—Ä–µ–≤–æ –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ üå±</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ç—Ä–æ–∏—Ç—å –¥–µ—Ä–µ–≤–æ!</p>
                </div>
            `;
            return;
        }

        container.innerHTML = treeData.map(person => this.renderTreeNode(person, 0)).join('');
    }

    renderTreeNode(person, level = 0) {
        const childrenHTML = person.children && person.children.length > 0
            ? `<div class="children-container">${person.children.map(child => this.renderTreeNode(child, level + 1)).join('')}</div>`
            : '';

        const birthDate = person.birth_date ?
            new Date(person.birth_date + 'T00:00:00').toLocaleDateString('ru-RU') : '';

        return `
            <div class="tree-node level-${level}">
                <div class="person-card">
                    <div class="person-name">${this.escapeHtml(person.first_name)} ${this.escapeHtml(person.last_name)}</div>
                    ${person.birth_date ? `<div class="person-birth">üéÇ ${birthDate}</div>` : ''}
                    <div class="person-id">ID: ${person.id}</div>
                </div>
                ${childrenHTML}
            </div>
        `;
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    async handleSubmit(event) {
        console.log('Form submitted');

        const submitBtn = document.getElementById('submitBtn');
        const originalText = submitBtn.textContent;

        try {
            submitBtn.disabled = true;
            submitBtn.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...';

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
            const formData = new FormData(event.target);
            const parentId = formData.get('parent_id');

            const personData = {
                first_name: formData.get('first_name'),
                last_name: formData.get('last_name'),
                birth_date: formData.get('birth_date') || null,
                parent_id: parentId ? parseInt(parentId) : null
            };

            console.log('Submitting person data:', personData);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –∫ API
            await this.apiCall('/persons/', {
                method: 'POST',
                body: personData
            });

            this.showSuccess('–†–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            event.target.reset();

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadPersons();
            await this.loadTree();

        } catch (error) {
            console.error('Failed to create person:', error);
            this.showError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.');
        } finally {
            submitBtn.disabled = false;
            submitBtn.textContent = originalText;
        }
    }

    showError(message) {
        this.showMessage(message, 'error');
    }

    showSuccess(message) {
        this.showMessage(message, 'success');
    }

    showMessage(message, type) {
        const messageContainer = document.getElementById('messageContainer');
        messageContainer.innerHTML = '';

        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${type}`;
        messageDiv.textContent = message;

        messageContainer.appendChild(messageDiv);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            if (messageDiv.parentNode) {
                messageDiv.remove();
            }
        }, 5000);
    }

    showTreeError() {
        const container = document.getElementById('treeContainer');
        container.innerHTML = `
            <div class="error">
                –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ä–µ–≤–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:<br>
                1. –ó–∞–ø—É—â–µ–Ω –ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 8000<br>
                2. –û—Ç–∫—Ä—ã—Ç –ª–∏ –ø–æ—Ä—Ç 8000 –≤ firewall<br>
                3. –õ–æ–≥–∏ –±—ç–∫–µ–Ω–¥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
            </div>
        `;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
document.addEventListener('DOMContentLoaded', () => {
    window.familyTreeApp = new FamilyTreeApp();
});